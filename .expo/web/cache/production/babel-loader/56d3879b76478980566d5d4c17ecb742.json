{"ast":null,"code":"import*as React from'react';import{useSubscription}from'use-subscription';import useNavigation from\"./useNavigation\";export default function useIsFocused(){var navigation=useNavigation();var getCurrentValue=React.useCallback(navigation.isFocused,[navigation]);var subscribe=React.useCallback(function(callback){var unsubscribeFocus=navigation.addListener('focus',function(){return callback(true);});var unsubscribeBlur=navigation.addListener('blur',function(){return callback(false);});return function(){unsubscribeFocus();unsubscribeBlur();};},[navigation]);return useSubscription({getCurrentValue:getCurrentValue,subscribe:subscribe});}","map":{"version":3,"sources":["useIsFocused.tsx"],"names":["navigation","useNavigation","getCurrentValue","React","subscribe","callback","unsubscribeFocus","unsubscribeBlur","useSubscription"],"mappings":"AAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CACA,OAAA,eAAA,KAAA,kBAAA,CACA,MAAA,CAAA,aAAA,uBAOA,cAAe,SAAA,CAAA,YAAA,EAAiC,CAC9C,GAAMA,CAAAA,UAAU,CAAGC,aAAnB,EAAA,CACA,GAAMC,CAAAA,eAAe,CAAGC,KAAK,CAALA,WAAAA,CAAkBH,UAAU,CAA5BG,SAAAA,CAAwC,CAAhE,UAAgE,CAAxCA,CAAxB,CACA,GAAMC,CAAAA,SAAS,CAAG,KAAK,CAAL,WAAA,CACfC,SAAAA,QAAD,CAAwC,CACtC,GAAMC,CAAAA,gBAAgB,CAAGN,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,CAAgC,iBACvDK,CAAAA,QAAQ,CADV,IACU,CAD+C,EAAhCL,CAAzB,CAIA,GAAMO,CAAAA,eAAe,CAAGP,UAAU,CAAVA,WAAAA,CAAAA,MAAAA,CAA+B,iBACrDK,CAAAA,QAAQ,CADV,KACU,CAD6C,EAA/BL,CAAxB,CAIA,MAAO,WAAM,CACXM,gBAAgB,GAChBC,eAAe,GAFjB,CAAA,CAVc,CAAA,CAehB,CAfF,UAeE,CAfgB,CAAlB,CAkBA,MAAOC,CAAAA,eAAe,CAAC,CACrBN,eADqB,CACrBA,eADqB,CAErBE,SAAAA,CAAAA,SAFqB,CAAD,CAAtB,CAID","sourcesContent":["import * as React from 'react';\nimport { useSubscription } from 'use-subscription';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n * It uses `use-subscription` under the hood for safer use in concurrent mode.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);\n  const subscribe = React.useCallback(\n    (callback: (value: boolean) => void) => {\n      const unsubscribeFocus = navigation.addListener('focus', () =>\n        callback(true)\n      );\n\n      const unsubscribeBlur = navigation.addListener('blur', () =>\n        callback(false)\n      );\n\n      return () => {\n        unsubscribeFocus();\n        unsubscribeBlur();\n      };\n    },\n    [navigation]\n  );\n\n  return useSubscription({\n    getCurrentValue,\n    subscribe,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}