{"ast":null,"code":"import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";export default function useFocusedListenersChildrenAdapter(_ref){var navigation=_ref.navigation,focusedListeners=_ref.focusedListeners;var _React$useContext=React.useContext(NavigationBuilderContext),addFocusedListener=_React$useContext.addFocusedListener;var listener=React.useCallback(function(callback){if(navigation.isFocused()){for(var _iterator=focusedListeners,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]();;){var _ref2;if(_isArray){if(_i>=_iterator.length)break;_ref2=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref2=_i.value;}var _listener2=_ref2;var _listener3=_listener2(callback),_handled=_listener3.handled,_result=_listener3.result;if(_handled){return{handled:_handled,result:_result};}}return{handled:true,result:callback(navigation)};}else{return{handled:false,result:null};}},[focusedListeners,navigation]);React.useEffect(function(){return addFocusedListener===null||addFocusedListener===void 0?void 0:addFocusedListener(listener);},[addFocusedListener,listener]);}","map":{"version":3,"sources":["useFocusedListenersChildrenAdapter.tsx"],"names":["focusedListeners","addFocusedListener","React","listener","callback","navigation","result","handled"],"mappings":"AAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CAEA,MAAA,CAAA,wBAAA,kCAcA,cAAe,SAAA,CAAA,kCAAA,MAGH,IAH+C,CAAA,UAG/C,MAH+C,UAG/C,CADVA,gBACU,MADVA,gBACU,uBACqBE,KAAK,CAALA,UAAAA,CAA/B,wBAA+BA,CADrB,CACFD,kBADE,mBACFA,kBADE,CAGV,GAAME,CAAAA,QAAQ,CAAG,KAAK,CAAL,WAAA,CACdC,SAAAA,QAAD,CAA8C,CAC5C,GAAIC,UAAU,CAAd,SAAIA,EAAJ,CAA4B,CAC1B,kBAAA,gBAAA,4IAAyC,0IAAzC,CAAA,UAAyC,sBACXF,UAAQ,CAApC,QAAoC,CADG,CACjC,QADiC,YACjC,OADiC,CACtBG,OADsB,YACtBA,MADsB,CAGvC,GAAA,QAAA,CAAa,CACX,MAAO,CAAEC,OAAF,CAAEA,QAAF,CAAWD,MAAAA,CAAAA,OAAX,CAAP,CACD,CACF,CAED,MAAO,CAAEC,OAAO,CAAT,IAAA,CAAiBD,MAAM,CAAEF,QAAQ,CAAA,UAAA,CAAjC,CAAP,CATF,CAAA,IAUO,CACL,MAAO,CAAEG,OAAO,CAAT,KAAA,CAAkBD,MAAM,CAAE,IAA1B,CAAP,CACD,CAdY,CAAA,CAgBf,CAAA,gBAAA,CAhBF,UAgBE,CAhBe,CAAjB,CAmBAJ,KAAK,CAALA,SAAAA,CAAgB,iBAAMD,CAAAA,kBAAN,GAAA,IAAMA,EAAAA,kBAAN,GAAA,IAAA,EAAMA,CAAN,IAAA,EAAMA,CAAAA,kBAAkB,CAAxCC,QAAwC,CAAxB,EAAhBA,CAAsD,CAAA,kBAAA,CAAtDA,QAAsD,CAAtDA,EAID","sourcesContent":["import * as React from 'react';\nimport { ParamListBase } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addFocusedListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(() => addFocusedListener?.(listener), [\n    addFocusedListener,\n    listener,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}