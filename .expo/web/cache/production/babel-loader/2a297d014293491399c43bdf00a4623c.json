{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';var UNINTIALIZED_STATE={};export default function useSyncState(initialState){var stateRef=React.useRef(UNINTIALIZED_STATE);if(stateRef.current===UNINTIALIZED_STATE){stateRef.current=typeof initialState==='function'?initialState():initialState;}var _React$useState=React.useState(stateRef.current),_React$useState2=_slicedToArray(_React$useState,2),state=_React$useState2[0],setTrackingState=_React$useState2[1];var getState=React.useCallback(function(){return stateRef.current;},[]);var setState=React.useCallback(function(state){if(state===stateRef.current){return;}stateRef.current=state;setTrackingState(state);},[]);return[state,getState,setState];}","map":{"version":3,"sources":["useSyncState.tsx"],"names":["UNINTIALIZED_STATE","stateRef","React","initialState","getState","setState","state","setTrackingState"],"mappings":"iEAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CAEA,GAAMA,CAAAA,kBAAkB,CAAxB,EAAA,CAEA,cAAe,SAAA,CAAA,YAAA,CAAA,YAAA,CAAuD,CACpE,GAAMC,CAAAA,QAAQ,CAAGC,KAAK,CAALA,MAAAA,CAAjB,kBAAiBA,CAAjB,CAEA,GAAID,QAAQ,CAARA,OAAAA,GAAJ,kBAAA,CAA6C,CAC3CA,QAAQ,CAARA,OAAAA,CAEE,MAAA,CAAA,YAAA,GAAA,UAAA,CAAqCE,YAArC,EAAA,CAFFF,YAAAA,CAGD,CAPmE,oBASlCC,KAAK,CAALA,QAAAA,CAAeD,QAAQ,CAAzD,OAAkCC,CATkC,oDAS9D,KAT8D,qBAS9D,gBAT8D,qBAWpE,GAAME,CAAAA,QAAQ,CAAGF,KAAK,CAALA,WAAAA,CAAkB,iBAAMD,CAAAA,QAAQ,CAAhCC,OAAkB,EAAlBA,CAAjB,EAAiBA,CAAjB,CAEA,GAAMG,CAAAA,QAAQ,CAAG,KAAK,CAAL,WAAA,CAAmBC,SAAAA,KAAD,CAAc,CAC/C,GAAIA,KAAK,GAAKL,QAAQ,CAAtB,OAAA,CAAgC,CAC9B,OACD,CAEDA,QAAQ,CAARA,OAAAA,CAAAA,KAAAA,CACAM,gBAAgB,CAAhBA,KAAgB,CAAhBA,CANe,CAAA,CAAjB,EAAiB,CAAjB,CASA,MAAO,CAAA,KAAA,CAAA,QAAA,CAAP,QAAO,CAAP,CACD","sourcesContent":["import * as React from 'react';\n\nconst UNINTIALIZED_STATE = {};\n\nexport default function useSyncState<T>(initialState?: (() => T) | T) {\n  const stateRef = React.useRef<T>(UNINTIALIZED_STATE as any);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n      // @ts-ignore\n      typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [state, setTrackingState] = React.useState(stateRef.current);\n\n  const getState = React.useCallback(() => stateRef.current, []);\n\n  const setState = React.useCallback((state: T) => {\n    if (state === stateRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n    setTrackingState(state);\n  }, []);\n\n  return [state, getState, setState] as const;\n}\n"]},"metadata":{},"sourceType":"module"}