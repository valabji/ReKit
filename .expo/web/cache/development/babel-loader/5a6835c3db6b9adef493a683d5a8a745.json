{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/valabji/Desktop/React/ReKit/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport BottomTabNavigator from \"./navigation/BottomTabNavigator\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport RegScreen from \"./screens/Register\";\nimport Screen3 from \"./screens/Screen3\";\nimport useLinking from \"./navigation/useLinking\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nvar Stack = createStackNavigator();\nexport default function App(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      initialNavigationState = _React$useState4[0],\n      setInitialNavigationState = _React$useState4[1];\n\n  var containerRef = React.useRef();\n\n  var _useLinking = useLinking(containerRef),\n      getInitialState = _useLinking.getInitialState;\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              SplashScreen.preventAutoHide();\n              _context.t0 = setInitialNavigationState;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(getInitialState());\n\n            case 5:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({}, Ionicons.font, {\n                'space-mono': require(\"./assets/fonts/SpaceMono-Regular.ttf\")\n              })));\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t2 = _context[\"catch\"](0);\n              console.warn(_context.t2);\n\n            case 14:\n              _context.prev = 14;\n              setLoadingComplete(true);\n              SplashScreen.hide();\n              return _context.finish(14);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 11, 14, 18]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, Platform.OS === 'ios' && React.createElement(StatusBar, {\n      barStyle: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 35\n      }\n    }), React.createElement(NavigationContainer, {\n      ref: containerRef,\n      initialState: initialNavigationState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, React.createElement(Stack.Navigator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, React.createElement(Stack.Screen, {\n      name: \"Root\",\n      component: LoginScreen,\n      options: {\n        title: \"ReKit / Login\",\n        headerStyle: {\n          backgroundColor: \"#ddd\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"BotNav\",\n      component: DNav,\n      options: {\n        title: \"Main Screen\",\n        headerStyle: {\n          backgroundColor: \"#ddd\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }))));\n  }\n}\nvar Drawer = createDrawerNavigator();\n\nfunction DNav() {\n  return React.createElement(Drawer.Navigator, {\n    initialRouteName: \"Home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, React.createElement(Drawer.Screen, {\n    name: \"Home\",\n    component: BottomTabNavigator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"Screen3\",\n    component: Screen3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar BottomNav = createBottomTabNavigator();\n\nfunction BNav() {\n  return React.createElement(BottomNav.Navigator, {\n    initialRouteName: INITIAL_ROUTE_NAME,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, React.createElement(BottomNav.Screen, {\n    name: \"Home\",\n    component: LoginScreen,\n    options: {\n      title: 'Login',\n      tabBarIcon: function tabBarIcon(_ref) {\n        var focused = _ref.focused;\n        return React.createElement(TabBarIcon, {\n          focused: focused,\n          name: \"md-code-working\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 40\n          }\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), React.createElement(BottomNav.Screen, {\n    name: \"Sc2\",\n    component: RegScreen,\n    options: {\n      title: 'Register',\n      tabBarIcon: function tabBarIcon(_ref2) {\n        var focused = _ref2.focused;\n        return React.createElement(TabBarIcon, {\n          focused: focused,\n          name: \"md-book\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 40\n          }\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});","map":{"version":3,"sources":["/Users/valabji/Desktop/React/ReKit/App.js"],"names":["React","SplashScreen","Font","Ionicons","NavigationContainer","createStackNavigator","createDrawerNavigator","BottomTabNavigator","LoginScreen","RegScreen","Screen3","useLinking","createBottomTabNavigator","Stack","App","props","useState","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","useRef","getInitialState","useEffect","loadResourcesAndDataAsync","preventAutoHide","loadAsync","font","require","console","warn","hide","skipLoadingScreen","styles","container","Platform","OS","title","headerStyle","backgroundColor","DNav","Drawer","BottomNav","BNav","INITIAL_ROUTE_NAME","tabBarIcon","focused","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform, StatusBar, StyleSheet, View, Text } from 'react-native';\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer'\nimport BottomTabNavigator from './navigation/BottomTabNavigator';\nimport LoginScreen from './screens/LoginScreen'\nimport RegScreen from './screens/Register'\nimport Screen3 from './screens/Screen3'\nimport useLinking from './navigation/useLinking';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nconst Stack = createStackNavigator();\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\n  const containerRef = React.useRef();\n  const { getInitialState } = useLinking(containerRef);\n\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHide();\n        setInitialNavigationState(await getInitialState());\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hide();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return (\n      <View style={styles.container}>\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\n        <NavigationContainer ref={containerRef} initialState={initialNavigationState}>\n          <Stack.Navigator>\n            <Stack.Screen name=\"Root\" component={LoginScreen} options={{title:\"ReKit / Login\",headerStyle:{backgroundColor:\"#ddd\"}}} />\n            <Stack.Screen name=\"BotNav\" component={DNav} options={{title:\"Main Screen\", headerStyle:{backgroundColor:\"#ddd\"}}}/>\n          </Stack.Navigator>\n        </NavigationContainer>\n      </View>\n    );\n  }\n}\nconst Drawer = createDrawerNavigator();\nfunction DNav(){\n  return(\n    <Drawer.Navigator initialRouteName=\"Home\"> \n      <Drawer.Screen name=\"Home\" component={BottomTabNavigator}/>\n      <Drawer.Screen name=\"Screen3\" component={Screen3}/>\n    </Drawer.Navigator>\n  );\n}\n\nconst BottomNav = createBottomTabNavigator();\nfunction BNav(){\n  return (\n    <BottomNav.Navigator initialRouteName={INITIAL_ROUTE_NAME}>\n      <BottomNav.Screen\n        name=\"Home\"\n        component={LoginScreen}\n        options={{\n          title: 'Login',\n          tabBarIcon: ({ focused }) => <TabBarIcon focused={focused} name=\"md-code-working\" />,\n        }}\n      />\n      <BottomNav.Screen\n        name=\"Sc2\"\n        component={RegScreen}\n        options={{\n          title: 'Register',\n          tabBarIcon: ({ focused }) => <TabBarIcon focused={focused} name=\"md-book\" />,\n        }}\n      />\n    </BottomNav.Navigator>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}