{"ast":null,"code":"function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import shortid from'shortid';import BaseRouter from\"./BaseRouter\";var TYPE_ROUTE='route';export var TabActions={jumpTo:function jumpTo(name,params){return{type:'JUMP_TO',payload:{name:name,params:params}};}};var getRouteHistory=function getRouteHistory(routes,index,backBehavior){var history=[{type:TYPE_ROUTE,key:routes[index].key}];switch(backBehavior){case'initialRoute':if(index!==0){history.unshift({type:TYPE_ROUTE,key:routes[0].key});}break;case'order':for(var i=index;i>0;i--){history.unshift({type:TYPE_ROUTE,key:routes[i-1].key});}break;case'history':break;}return history;};var changeIndex=function changeIndex(state,index,backBehavior){var history;if(backBehavior==='history'){var currentKey=state.routes[index].key;history=state.history.filter(function(it){return it.type==='route'?it.key!==currentKey:false;}).concat({type:TYPE_ROUTE,key:currentKey});}else{history=getRouteHistory(state.routes,index,backBehavior);}return _objectSpread({},state,{index:index,history:history});};export default function TabRouter(_ref){var initialRouteName=_ref.initialRouteName,_ref$backBehavior=_ref.backBehavior,backBehavior=_ref$backBehavior===void 0?'history':_ref$backBehavior;var router=_objectSpread({},BaseRouter,{type:'tab',getInitialState:function getInitialState(_ref2){var routeNames=_ref2.routeNames,routeParamList=_ref2.routeParamList;var index=initialRouteName!==undefined&&routeNames.includes(initialRouteName)?routeNames.indexOf(initialRouteName):0;var routes=routeNames.map(function(name){return{name:name,key:\"\".concat(name,\"-\").concat(shortid()),params:routeParamList[name]};});var history=getRouteHistory(routes,index,backBehavior);return{stale:false,type:'tab',key:\"tab-\".concat(shortid()),index:index,routeNames:routeNames,history:history,routes:routes};},getRehydratedState:function getRehydratedState(partialState,_ref3){var routeNames=_ref3.routeNames,routeParamList=_ref3.routeParamList;var _state$history,_history;var state=partialState;if(state.stale===false){return state;}var routes=routeNames.map(function(name){var route=state.routes.find(function(r){return r.name===name;});return _objectSpread({},route,{name:name,key:route&&route.name===name&&route.key?route.key:\"\".concat(name,\"-\").concat(shortid()),params:routeParamList[name]!==undefined?_objectSpread({},routeParamList[name],{},route?route.params:undefined):route?route.params:undefined});});var index=Math.min(Math.max(typeof state.index==='number'?state.index:routeNames.indexOf(state.routes[0].name),0),routes.length-1);var history=(_state$history=state.history)===null||_state$history===void 0?void 0:_state$history.filter(function(it){return routes.find(function(r){return r.key===it.key;});});if(!((_history=history)===null||_history===void 0?void 0:_history.length)){history=getRouteHistory(routes,index,backBehavior);}return{stale:false,type:'tab',key:\"tab-\".concat(shortid()),index:index,routeNames:routeNames,history:history,routes:routes};},getStateForRouteNamesChange:function getStateForRouteNamesChange(state,_ref4){var routeNames=_ref4.routeNames,routeParamList=_ref4.routeParamList;var routes=routeNames.map(function(name){return state.routes.find(function(r){return r.name===name;})||{name:name,key:\"\".concat(name,\"-\").concat(shortid()),params:routeParamList[name]};});var index=Math.max(0,routeNames.indexOf(state.routes[state.index].name));var history=state.history.filter(function(it){return routes.find(function(r){return r.key===it.key;});});if(!history.length){history=getRouteHistory(routes,index,backBehavior);}return _objectSpread({},state,{history:history,routeNames:routeNames,routes:routes,index:index});},getStateForRouteFocus:function getStateForRouteFocus(state,key){var index=state.routes.findIndex(function(r){return r.key===key;});if(index===-1||index===state.index){return state;}return changeIndex(state,index,backBehavior);},getStateForAction:function getStateForAction(state,action){switch(action.type){case'JUMP_TO':case'NAVIGATE':{var index=-1;if(action.type==='NAVIGATE'&&action.payload.key){index=state.routes.findIndex(function(route){return route.key===action.payload.key;});}else{index=state.routes.findIndex(function(route){return route.name===action.payload.name;});}if(index===-1){return null;}return changeIndex(_objectSpread({},state,{routes:action.payload.params!==undefined?state.routes.map(function(route,i){return i===index?_objectSpread({},route,{params:_objectSpread({},route.params,{},action.payload.params)}):route;}):state.routes}),index,backBehavior);}case'GO_BACK':{if(state.history.length===1){return null;}var previousKey=state.history[state.history.length-2].key;var _index=state.routes.findIndex(function(route){return route.key===previousKey;});if(_index===-1){return null;}return _objectSpread({},state,{history:state.history.slice(0,-1),index:_index});}default:return BaseRouter.getStateForAction(state,action);}},shouldActionChangeFocus:function shouldActionChangeFocus(action){return action.type==='NAVIGATE';},actionCreators:TabActions});return router;}","map":{"version":3,"sources":["TabRouter.tsx"],"names":["TYPE_ROUTE","TabActions","jumpTo","type","payload","name","params","getRouteHistory","history","key","routes","index","i","changeIndex","backBehavior","currentKey","state","it","router","getInitialState","routeParamList","initialRouteName","routeNames","shortid","stale","getRehydratedState","route","r","undefined","Math","getStateForRouteNamesChange","getStateForRouteFocus","getStateForAction","action","previousKey","BaseRouter","shouldActionChangeFocus","actionCreators"],"mappings":"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","sourcesContent":["import shortid from 'shortid';\nimport BaseRouter from './BaseRouter';\nimport {\n  NavigationState,\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior = 'initialRoute' | 'order' | 'history' | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState = Omit<NavigationState, 'history'> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: ParamList[RouteName] extends undefined | any\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n\n  switch (backBehavior) {\n    case 'initialRoute':\n      if (index !== 0) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[0].key });\n      }\n      break;\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState,\n  index: number,\n  backBehavior: BackBehavior\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior);\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'history',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${shortid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(routes, index, backBehavior);\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${shortid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (state as PartialState<TabNavigationState>).routes.find(\n          (r) => r.name === name\n        );\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${shortid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(\n          typeof state.index === 'number'\n            ? state.index\n            : routeNames.indexOf(state.routes[0].name),\n          0\n        ),\n        routes.length - 1\n      );\n\n      let history = state.history?.filter((it) =>\n        routes.find((r) => r.key === it.key)\n      );\n\n      if (!history?.length) {\n        history = getRouteHistory(routes, index, backBehavior);\n      }\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${shortid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find((r) => r.name === name) || {\n            name,\n            key: `${name}-${shortid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter((it) =>\n        routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior);\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior);\n    },\n\n    getStateForAction(state, action) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes:\n                action.payload.params !== undefined\n                  ? state.routes.map((route, i) =>\n                      i === index\n                        ? {\n                            ...route,\n                            params: {\n                              ...route.params,\n                              ...action.payload.params,\n                            },\n                          }\n                        : route\n                    )\n                  : state.routes,\n            },\n            index,\n            backBehavior\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}