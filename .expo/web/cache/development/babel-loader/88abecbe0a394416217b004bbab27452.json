{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/valabji/Desktop/React/ReKit/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport BottomTabNavigator from \"./navigation/BottomTabNavigator\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport useLinking from \"./navigation/useLinking\";\nvar Stack = createStackNavigator();\nexport default function App(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      initialNavigationState = _React$useState4[0],\n      setInitialNavigationState = _React$useState4[1];\n\n  var containerRef = React.useRef();\n\n  var _useLinking = useLinking(containerRef),\n      getInitialState = _useLinking.getInitialState;\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              SplashScreen.preventAutoHide();\n              _context.t0 = setInitialNavigationState;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(getInitialState());\n\n            case 5:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({}, Ionicons.font, {\n                'space-mono': require(\"./assets/fonts/SpaceMono-Regular.ttf\")\n              })));\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t2 = _context[\"catch\"](0);\n              console.warn(_context.t2);\n\n            case 14:\n              _context.prev = 14;\n              setLoadingComplete(true);\n              SplashScreen.hide();\n              return _context.finish(14);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 11, 14, 18]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, Platform.OS === 'ios' && React.createElement(StatusBar, {\n      barStyle: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 35\n      }\n    }), React.createElement(NavigationContainer, {\n      ref: containerRef,\n      initialState: initialNavigationState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, React.createElement(Stack.Navigator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, React.createElement(Stack.Screen, {\n      name: \"Root\",\n      component: LoginScreen,\n      options: {\n        title: \"Delivery / Login\",\n        headerStyle: {\n          backgroundColor: \"#ddd\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"BotNav\",\n      component: DNav,\n      options: {\n        title: \"Main Screen\",\n        headerStyle: {\n          backgroundColor: \"#ddd\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }))));\n  }\n}\nvar Drawer = createDrawerNavigator();\n\nfunction DNav() {\n  return React.createElement(Drawer.Navigator, {\n    initialRouteName: \"Home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, React.createElement(Drawer.Screen, {\n    name: \"Home\",\n    component: BottomTabNavigator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});","map":{"version":3,"sources":["/Users/valabji/Desktop/React/ReKit/App.js"],"names":["React","SplashScreen","Font","Ionicons","NavigationContainer","createStackNavigator","createDrawerNavigator","BottomTabNavigator","LoginScreen","useLinking","Stack","App","props","useState","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","useRef","getInitialState","useEffect","loadResourcesAndDataAsync","preventAutoHide","loadAsync","font","require","console","warn","hide","skipLoadingScreen","styles","container","Platform","OS","title","headerStyle","backgroundColor","DNav","Drawer","StyleSheet","create","flex"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAEA,SAASC,YAAT,QAA6B,MAA7B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,OAAOC,kBAAP;AACA,OAAOC,WAAP;AACA,OAAOC,UAAP;AAEA,IAAMC,KAAK,GAAGL,oBAAoB,EAAlC;AAEA,eAAe,SAASM,GAAT,CAAaC,KAAb,EAAoB;AAAA,wBACeZ,KAAK,CAACa,QAAN,CAAe,KAAf,CADf;AAAA;AAAA,MAC1BC,iBAD0B;AAAA,MACPC,kBADO;;AAAA,yBAE2Bf,KAAK,CAACa,QAAN,EAF3B;AAAA;AAAA,MAE1BG,sBAF0B;AAAA,MAEFC,yBAFE;;AAGjC,MAAMC,YAAY,GAAGlB,KAAK,CAACmB,MAAN,EAArB;;AAHiC,oBAILV,UAAU,CAACS,YAAD,CAJL;AAAA,MAIzBE,eAJyB,eAIzBA,eAJyB;;AAMjCpB,EAAAA,KAAK,CAACqB,SAAN,CAAgB,YAAM;AACpB,aAAeC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIrB,cAAAA,YAAY,CAACsB,eAAb;AAFJ,4BAGIN,yBAHJ;AAAA;AAAA,+CAGoCG,eAAe,EAHnD;;AAAA;AAAA;AAAA;AAAA;AAAA,+CAIUlB,IAAI,CAACsB,SAAL,mBACDrB,QAAQ,CAACsB,IADR;AAEJ,8BAAcC,OAAO;AAFjB,iBAJV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIC,cAAAA,OAAO,CAACC,IAAR;;AATJ;AAAA;AAWIb,cAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAd,cAAAA,YAAY,CAAC4B,IAAb;AAZJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBAP,IAAAA,yBAAyB;AAC1B,GAlBD,EAkBG,EAlBH;;AAmBA,MAAI,CAACR,iBAAD,IAAsB,CAACF,KAAK,CAACkB,iBAAjC,EAAoD;AAClD,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB,oBAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD5B,EAEE,oBAAC,mBAAD;AAAqB,MAAA,GAAG,EAAEhB,YAA1B;AAAwC,MAAA,YAAY,EAAEF,sBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD,CAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,IAAI,EAAC,MAAnB;AAA0B,MAAA,SAAS,EAAER,WAArC;AAAkD,MAAA,OAAO,EAAE;AAAC2B,QAAAA,KAAK,EAAC,kBAAP;AAA0BC,QAAAA,WAAW,EAAC;AAACC,UAAAA,eAAe,EAAC;AAAjB;AAAtC,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,IAAI,EAAC,QAAnB;AAA4B,MAAA,SAAS,EAAEC,IAAvC;AAA6C,MAAA,OAAO,EAAE;AAACH,QAAAA,KAAK,EAAC,aAAP;AAAqBC,QAAAA,WAAW,EAAC;AAACC,UAAAA,eAAe,EAAC;AAAjB;AAAjC,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CAFF,CADF;AAWD;AACF;AACD,IAAME,MAAM,GAAGjC,qBAAqB,EAApC;;AACA,SAASgC,IAAT,GAAe;AACb,SACE,oBAAC,MAAD,CAAQ,SAAR;AAAkB,IAAA,gBAAgB,EAAC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD,CAAQ,MAAR;AAAe,IAAA,IAAI,EAAC,MAApB;AAA2B,IAAA,SAAS,EAAE/B,kBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,IAAMwB,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC/BT,EAAAA,SAAS,EAAE;AACTU,IAAAA,IAAI,EAAE,CADG;AAETL,IAAAA,eAAe,EAAE;AAFR;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StatusBar, StyleSheet, View } from 'react-native';\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer'\nimport BottomTabNavigator from './navigation/BottomTabNavigator';\nimport LoginScreen from './screens/LoginScreen'\nimport useLinking from './navigation/useLinking';\n\nconst Stack = createStackNavigator();\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\n  const containerRef = React.useRef();\n  const { getInitialState } = useLinking(containerRef);\n\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHide();\n        setInitialNavigationState(await getInitialState());\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hide();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return (\n      <View style={styles.container}>\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\n        <NavigationContainer ref={containerRef} initialState={initialNavigationState}>\n          <Stack.Navigator>\n            <Stack.Screen name=\"Root\" component={LoginScreen} options={{title:\"Delivery / Login\",headerStyle:{backgroundColor:\"#ddd\"}}} />\n            <Stack.Screen name=\"BotNav\" component={DNav} options={{title:\"Main Screen\",headerStyle:{backgroundColor:\"#ddd\"}}}/>\n          </Stack.Navigator>\n        </NavigationContainer>\n      </View>\n    );\n  }\n}\nconst Drawer = createDrawerNavigator();\nfunction DNav(){\n  return(\n    <Drawer.Navigator initialRouteName=\"Home\"> \n      <Drawer.Screen name=\"Home\" component={BottomTabNavigator}/>\n    </Drawer.Navigator>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}