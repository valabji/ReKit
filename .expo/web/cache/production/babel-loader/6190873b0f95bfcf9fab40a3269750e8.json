{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{useTheme}from'@react-navigation/native';import Card from\"./Card\";import HeaderHeightContext from\"../../utils/HeaderHeightContext\";var EPSILON=0.1;function CardContainer(_ref){var active=_ref.active,cardOverlay=_ref.cardOverlay,cardOverlayEnabled=_ref.cardOverlayEnabled,cardShadowEnabled=_ref.cardShadowEnabled,cardStyle=_ref.cardStyle,cardStyleInterpolator=_ref.cardStyleInterpolator,closing=_ref.closing,gesture=_ref.gesture,focused=_ref.focused,gestureDirection=_ref.gestureDirection,gestureEnabled=_ref.gestureEnabled,gestureResponseDistance=_ref.gestureResponseDistance,gestureVelocityImpact=_ref.gestureVelocityImpact,getPreviousRoute=_ref.getPreviousRoute,getFocusedRoute=_ref.getFocusedRoute,headerMode=_ref.headerMode,headerShown=_ref.headerShown,headerStyleInterpolator=_ref.headerStyleInterpolator,headerTransparent=_ref.headerTransparent,headerHeight=_ref.headerHeight,onHeaderHeightChange=_ref.onHeaderHeightChange,index=_ref.index,layout=_ref.layout,onCloseRoute=_ref.onCloseRoute,onOpenRoute=_ref.onOpenRoute,onPageChangeCancel=_ref.onPageChangeCancel,onPageChangeConfirm=_ref.onPageChangeConfirm,onPageChangeStart=_ref.onPageChangeStart,onTransitionEnd=_ref.onTransitionEnd,onTransitionStart=_ref.onTransitionStart,previousScene=_ref.previousScene,renderHeader=_ref.renderHeader,renderScene=_ref.renderScene,safeAreaInsetBottom=_ref.safeAreaInsetBottom,safeAreaInsetLeft=_ref.safeAreaInsetLeft,safeAreaInsetRight=_ref.safeAreaInsetRight,safeAreaInsetTop=_ref.safeAreaInsetTop,scene=_ref.scene,transitionSpec=_ref.transitionSpec;React.useEffect(function(){onPageChangeConfirm===null||onPageChangeConfirm===void 0?void 0:onPageChangeConfirm();},[active,onPageChangeConfirm]);var handleOpen=function handleOpen(){onTransitionEnd===null||onTransitionEnd===void 0?void 0:onTransitionEnd({route:scene.route},false);onOpenRoute({route:scene.route});};var handleClose=function handleClose(){onTransitionEnd===null||onTransitionEnd===void 0?void 0:onTransitionEnd({route:scene.route},true);onCloseRoute({route:scene.route});};var handleTransitionStart=function handleTransitionStart(_ref2){var closing=_ref2.closing;if(active&&closing){onPageChangeConfirm===null||onPageChangeConfirm===void 0?void 0:onPageChangeConfirm();}else{onPageChangeCancel===null||onPageChangeCancel===void 0?void 0:onPageChangeCancel();}onTransitionStart===null||onTransitionStart===void 0?void 0:onTransitionStart({route:scene.route},closing);};var insets={top:safeAreaInsetTop,right:safeAreaInsetRight,bottom:safeAreaInsetBottom,left:safeAreaInsetLeft};var _useTheme=useTheme(),colors=_useTheme.colors;var _React$useState=React.useState('box-none'),_React$useState2=_slicedToArray(_React$useState,2),pointerEvents=_React$useState2[0],setPointerEvents=_React$useState2[1];React.useEffect(function(){var _scene$progress$next,_scene$progress$next$;var listener=(_scene$progress$next=scene.progress.next)===null||_scene$progress$next===void 0?void 0:(_scene$progress$next$=_scene$progress$next.addListener)===null||_scene$progress$next$===void 0?void 0:_scene$progress$next$.call(_scene$progress$next,function(_ref3){var value=_ref3.value;setPointerEvents(value<=EPSILON?'box-none':'none');});return function(){if(listener){var _scene$progress$next2,_scene$progress$next3;(_scene$progress$next2=scene.progress.next)===null||_scene$progress$next2===void 0?void 0:(_scene$progress$next3=_scene$progress$next2.removeListener)===null||_scene$progress$next3===void 0?void 0:_scene$progress$next3.call(_scene$progress$next2,listener);}};},[pointerEvents,scene.progress.next]);return React.createElement(Card,{index:index,gestureDirection:gestureDirection,layout:layout,insets:insets,gesture:gesture,current:scene.progress.current,next:scene.progress.next,closing:closing,onOpen:handleOpen,onClose:handleClose,overlay:cardOverlay,overlayEnabled:cardOverlayEnabled,shadowEnabled:cardShadowEnabled,onTransitionStart:handleTransitionStart,onGestureBegin:onPageChangeStart,onGestureCanceled:onPageChangeCancel,gestureEnabled:gestureEnabled,gestureResponseDistance:gestureResponseDistance,gestureVelocityImpact:gestureVelocityImpact,transitionSpec:transitionSpec,styleInterpolator:cardStyleInterpolator,accessibilityElementsHidden:!focused,importantForAccessibility:focused?'auto':'no-hide-descendants',pointerEvents:active?'box-none':pointerEvents,containerStyle:headerMode==='float'&&!headerTransparent&&headerShown!==false?{marginTop:headerHeight}:null,contentStyle:[{backgroundColor:colors.background},cardStyle],style:StyleSheet.absoluteFill},React.createElement(View,{style:styles.container},React.createElement(View,{style:styles.scene},React.createElement(HeaderHeightContext.Provider,{value:headerHeight},renderScene({route:scene.route}))),headerMode==='screen'?renderHeader({mode:'screen',layout:layout,insets:insets,scenes:[previousScene,scene],getPreviousRoute:getPreviousRoute,getFocusedRoute:getFocusedRoute,gestureDirection:gestureDirection,styleInterpolator:headerStyleInterpolator,onContentHeightChange:onHeaderHeightChange}):null));}export default React.memo(CardContainer);var styles=StyleSheet.create({container:{flex:1,flexDirection:'column-reverse'},scene:{flex:1}});","map":{"version":3,"sources":["CardContainer.tsx"],"names":["EPSILON","transitionSpec","React","onPageChangeConfirm","handleOpen","onTransitionEnd","route","scene","onOpenRoute","handleClose","onCloseRoute","handleTransitionStart","closing","active","onPageChangeCancel","onTransitionStart","insets","top","right","bottom","left","safeAreaInsetLeft","colors","useTheme","listener","value","setPointerEvents","focused","headerShown","marginTop","headerHeight","backgroundColor","background","StyleSheet","absoluteFill","styles","container","renderScene","renderHeader","mode","layout","scenes","getPreviousRoute","getFocusedRoute","gestureDirection","styleInterpolator","onContentHeightChange","onHeaderHeightChange","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport { Scene, Layout, StackHeaderMode, TransitionPreset } from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  previousScene?: Scene<Route<string>>;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: { style: StyleProp<ViewStyle> }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  headerMode: StackHeaderMode;\n  headerShown?: boolean;\n  headerTransparent?: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousRoute,\n  getFocusedRoute,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  headerTransparent,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onTransitionEnd,\n  onTransitionStart,\n  previousScene,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // `addListener` may not exist on web and older versions of React Native\n    // @ts-ignore\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-ignore\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={onPageChangeStart}\n      onGestureCanceled={onPageChangeCancel}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      containerStyle={\n        headerMode === 'float' && !headerTransparent && headerShown !== false\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <HeaderHeightContext.Provider value={headerHeight}>\n            {renderScene({ route: scene.route })}\n          </HeaderHeightContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousRoute,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}