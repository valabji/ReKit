{"ast":null,"code":"function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import{NavigationStateContext}from\"./BaseNavigationContainer\";import NavigationContext from\"./NavigationContext\";import NavigationRouteContext from\"./NavigationRouteContext\";import StaticContainer from\"./StaticContainer\";import EnsureSingleNavigator from\"./EnsureSingleNavigator\";export default function SceneView(_ref){var screen=_ref.screen,route=_ref.route,navigation=_ref.navigation,getState=_ref.getState,setState=_ref.setState;var navigatorKeyRef=React.useRef();var getKey=React.useCallback(function(){return navigatorKeyRef.current;},[]);var setKey=React.useCallback(function(key){navigatorKeyRef.current=key;},[]);var getCurrentState=React.useCallback(function(){var state=getState();var currentRoute=state.routes.find(function(r){return r.key===route.key;});return currentRoute?currentRoute.state:undefined;},[getState,route.key]);var setCurrentState=React.useCallback(function(child){var state=getState();setState(_objectSpread({},state,{routes:state.routes.map(function(r){return r.key===route.key?_objectSpread({},r,{state:child}):r;})}));},[getState,route.key,setState]);var context=React.useMemo(function(){return{state:route.state,getState:getCurrentState,setState:setCurrentState,getKey:getKey,setKey:setKey};},[getCurrentState,getKey,route.state,setCurrentState,setKey]);return React.createElement(NavigationContext.Provider,{value:navigation},React.createElement(NavigationRouteContext.Provider,{value:route},React.createElement(NavigationStateContext.Provider,{value:context},React.createElement(EnsureSingleNavigator,null,React.createElement(StaticContainer,{name:screen.name,render:screen.component||screen.children,navigation:navigation,route:route},'component'in screen&&screen.component!==undefined?React.createElement(screen.component,{navigation:navigation,route:route}):'children'in screen&&screen.children!==undefined?screen.children({navigation:navigation,route:route}):null)))));}","map":{"version":3,"sources":["SceneView.tsx"],"names":["setState","navigatorKeyRef","React","getKey","setKey","key","getCurrentState","state","getState","currentRoute","r","route","setCurrentState","child","routes","context","navigation","screen"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport { NavigationStateContext } from './BaseNavigationContainer';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n    }),\n    [getCurrentState, getKey, route.state, setCurrentState, setKey]\n  );\n\n  return (\n    <NavigationContext.Provider value={navigation}>\n      <NavigationRouteContext.Provider value={route}>\n        <NavigationStateContext.Provider value={context}>\n          <EnsureSingleNavigator>\n            <StaticContainer\n              name={screen.name}\n              // @ts-ignore\n              render={screen.component || screen.children}\n              navigation={navigation}\n              route={route}\n            >\n              {'component' in screen && screen.component !== undefined ? (\n                // @ts-ignore\n                <screen.component navigation={navigation} route={route} />\n              ) : 'children' in screen && screen.children !== undefined ? (\n                // @ts-ignore\n                screen.children({ navigation, route })\n              ) : null}\n            </StaticContainer>\n          </EnsureSingleNavigator>\n        </NavigationStateContext.Provider>\n      </NavigationRouteContext.Provider>\n    </NavigationContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}